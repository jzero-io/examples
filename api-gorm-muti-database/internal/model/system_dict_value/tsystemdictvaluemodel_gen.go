// Code generated by goctl. DO NOT EDIT!

package system_dict_value

import (
	"context"
	"github.com/SpectatorNan/gorm-zero/gormc"
	"strings"

	"time"

	"gorm.io/gorm"
)

type (
	tSystemDictValueModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *TSystemDictValue) error

		FindOne(ctx context.Context, id int64) (*TSystemDictValue, error)
		FindOneByUuid(ctx context.Context, uuid string) (*TSystemDictValue, error)
		Update(ctx context.Context, tx *gorm.DB, data *TSystemDictValue) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultTSystemDictValueModel struct {
		conn  *gorm.DB
		table string
	}

	TSystemDictValue struct {
		Id         int64     `gorm:"column:id"`
		KeyUuid    string    `gorm:"column:key_uuid"`    // key uuid
		Uuid       string    `gorm:"column:uuid"`        // uuid
		Label      string    `gorm:"column:label"`       // 字典名称（展示）
		Value      string    `gorm:"column:value"`       // 字典值
		Sort       int64     `gorm:"column:sort"`        // 排序（升序）
		CreateTime time.Time `gorm:"column:create_time"` // 创建时间
		UpdateTime time.Time `gorm:"column:update_time"` // 更新时间
		Remarks    string    `gorm:"column:remarks"`
	}
)

func (TSystemDictValue) TableName() string {
	return strings.ReplaceAll("`T_system_dict_value`", "`", "")
}

func newTSystemDictValueModel(conn *gorm.DB) *defaultTSystemDictValueModel {
	return &defaultTSystemDictValueModel{
		conn:  conn,
		table: "`T_system_dict_value`",
	}
}

func (m *defaultTSystemDictValueModel) Insert(ctx context.Context, tx *gorm.DB, data *TSystemDictValue) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(&data).Error
	return err
}

func (m *defaultTSystemDictValueModel) FindOne(ctx context.Context, id int64) (*TSystemDictValue, error) {
	var resp TSystemDictValue
	err := m.conn.WithContext(ctx).Model(&TSystemDictValue{}).Where("`id` = ?", id).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTSystemDictValueModel) FindOneByUuid(ctx context.Context, uuid string) (*TSystemDictValue, error) {
	var resp TSystemDictValue
	err := m.conn.WithContext(ctx).Model(&TSystemDictValue{}).Where("`uuid` = ?", uuid).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTSystemDictValueModel) Update(ctx context.Context, tx *gorm.DB, data *TSystemDictValue) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(data).Error
	return err
}

func (m *defaultTSystemDictValueModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Delete(&TSystemDictValue{}, id).Error

	return err
}

func (m *defaultTSystemDictValueModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.conn.WithContext(ctx).Transaction(fn)
}
