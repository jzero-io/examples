// Code generated by goctl. DO NOT EDIT!

package system_dict_key

import (
	"context"
	"github.com/SpectatorNan/gorm-zero/gormc"

	"gorm.io/gorm"
)

type (
	tSystemDictKeyModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *TSystemDictKey) error

		FindOne(ctx context.Context, id int64) (*TSystemDictKey, error)
		FindOneByCategoryCode(ctx context.Context, categoryCode string) (*TSystemDictKey, error)
		FindOneByUuid(ctx context.Context, uuid string) (*TSystemDictKey, error)
		Update(ctx context.Context, tx *gorm.DB, data *TSystemDictKey) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultTSystemDictKeyModel struct {
		conn  *gorm.DB
		table string
	}

	TSystemDictKey struct {
		Id           int64  `gorm:"column:id"`
		Uuid         string `gorm:"column:uuid"`          // uuid
		CategoryCode string `gorm:"column:category_code"` // 字典类型
		CategoryDesc string `gorm:"column:category_desc"` // 字典描述
		Sort         int64  `gorm:"column:sort"`          // 排序（升序）
	}
)

func (TSystemDictKey) TableName() string {
	return "`T_system_dict_key`"
}

func newTSystemDictKeyModel(conn *gorm.DB) *defaultTSystemDictKeyModel {
	return &defaultTSystemDictKeyModel{
		conn:  conn,
		table: "`T_system_dict_key`",
	}
}

func (m *defaultTSystemDictKeyModel) Insert(ctx context.Context, tx *gorm.DB, data *TSystemDictKey) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(&data).Error
	return err
}

func (m *defaultTSystemDictKeyModel) FindOne(ctx context.Context, id int64) (*TSystemDictKey, error) {
	var resp TSystemDictKey
	err := m.conn.WithContext(ctx).Model(&TSystemDictKey{}).Where("`id` = ?", id).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTSystemDictKeyModel) FindOneByCategoryCode(ctx context.Context, categoryCode string) (*TSystemDictKey, error) {
	var resp TSystemDictKey
	err := m.conn.WithContext(ctx).Model(&TSystemDictKey{}).Where("`category_code` = ?", categoryCode).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTSystemDictKeyModel) FindOneByUuid(ctx context.Context, uuid string) (*TSystemDictKey, error) {
	var resp TSystemDictKey
	err := m.conn.WithContext(ctx).Model(&TSystemDictKey{}).Where("`uuid` = ?", uuid).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTSystemDictKeyModel) Update(ctx context.Context, tx *gorm.DB, data *TSystemDictKey) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(data).Error
	return err
}

func (m *defaultTSystemDictKeyModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Delete(&TSystemDictKey{}, id).Error

	return err
}

func (m *defaultTSystemDictKeyModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.conn.WithContext(ctx).Transaction(fn)
}
