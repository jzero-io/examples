// Code generated by goctl. DO NOT EDIT.

package users

import (
	"context"
	"database/sql"
	"strings"

	"github.com/huandu/go-sqlbuilder"
	"github.com/jzero-io/jzero-contrib/condition"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	usersFieldNames          = builder.RawFieldNames(&Users{})
	usersRows                = strings.Join(usersFieldNames, ",")
	usersRowsExpectAutoSet   = strings.Join(stringx.Remove(usersFieldNames, "`id`"), ",")
	usersRowsWithPlaceHolder = strings.Join(stringx.Remove(usersFieldNames, "`id`"), "=?,") + "=?"
)

type (
	usersModel interface {
		Insert(ctx context.Context, data *Users) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*Users, error)
		FindOneByUsername(ctx context.Context, username string) (*Users, error)
		Update(ctx context.Context, data *Users) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultUsersModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Users struct {
		Id         uint64 `db:"id"`
		Username   string `db:"username"`
		Password   string `db:"password"`
		CreateTime string `db:"create_time"`
	}
)

func newUsersModel(conn sqlx.SqlConn) *defaultUsersModel {
	return &defaultUsersModel{
		conn:  conn,
		table: "`users`",
	}
}

func (m *defaultUsersModel) Delete(ctx context.Context, id uint64) error {
	sb := sqlbuilder.DeleteFrom(m.table)
	sb.Where(sb.EQ("`id`", id))
	sql, args := sb.Build()
	_, err := m.conn.ExecCtx(ctx, sql, args...)
	return err
}

func (m *defaultUsersModel) FindOne(ctx context.Context, id uint64) (*Users, error) {
	sb := sqlbuilder.Select(usersRows).From(m.table)
	sb.Where(sb.EQ("`id`", id))
	sb.Limit(1)
	sql, args := sb.Build()
	var resp Users
	err := m.conn.QueryRowCtx(ctx, &resp, sql, args...)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUsersModel) FindOneByUsername(ctx context.Context, username string) (*Users, error) {
	var resp Users
	sb := sqlbuilder.Select(usersRows).From(m.table)
	sb.Where(sb.EQ("`username` = ?", username))
	sb.Limit(1)
	sql, args := sb.Build()
	err := m.conn.QueryRowCtx(ctx, &resp, sql, args...)

	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUsersModel) Insert(ctx context.Context, data *Users) (sql.Result, error) {
	sql, args := sqlbuilder.NewInsertBuilder().
		InsertInto(m.table).
		Cols(usersRowsExpectAutoSet).
		Values(data.Username, data.Password, data.CreateTime).Build()
	ret, err := m.conn.ExecCtx(ctx, sql, args...)
	return ret, err
}

func (m *customUsersModel) createBuilder(build sqlbuilder.InsertBuilder) *sqlbuilder.InsertBuilder {
	return build.InsertInto(m.table)
}

func (m *customUsersModel) BulkInsert(ctx context.Context, datas []*Users) error {
	builder := sqlbuilder.NewInsertBuilder()
	builder.Cols(usersRowsExpectAutoSet)
	for _, data := range datas {
		builder.Values(data.Username, data.Password, data.CreateTime)
	}
	sql, args := m.createBuilder(*builder).Build()
	sql = strings.ReplaceAll(sql, "`", "")
	_, err := m.conn.ExecCtx(ctx, sql, args...)
	return err
}

func (m *defaultUsersModel) Update(ctx context.Context, newData *Users) error {
	sb := sqlbuilder.Update(m.table)
	split := strings.Split(usersRowsExpectAutoSet, ",")
	var assigns []string
	for _, s := range split {
		assigns = append(assigns, sb.Assign(s, nil))
	}
	sb.Set(assigns...)
	sb.Where(sb.EQ("`id`", nil))
	sql, _ := sb.Build()
	_, err := m.conn.ExecCtx(ctx, sql, newData.Username, newData.Password, newData.CreateTime, newData.Id)
	return err
}

func (m *defaultUsersModel) tableName() string {
	return m.table
}

func (m *customUsersModel) Find(ctx context.Context, conds ...condition.Condition) ([]*Users, error) {
	sb := sqlbuilder.Select(usersFieldNames...).From(m.table)
	condition.Apply(sb, conds...)
	sql, args := sb.Build()

	var resp []*Users
	err := m.conn.QueryRowsCtx(ctx, &resp, sql, args...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *customUsersModel) Page(ctx context.Context, conds ...condition.Condition) ([]*Users, int64, error) {
	sb := sqlbuilder.Select(usersFieldNames...).From(m.table)
	countsb := sqlbuilder.Select("count(*)").From(m.table)

	condition.Apply(sb, conds...)
	condition.Apply(countsb, conds...)

	var resp []*Users

	sql, args := sb.Build()
	err := m.conn.QueryRowsCtx(ctx, &resp, sql, args...)
	if err != nil {
		return nil, 0, err
	}

	// get total
	var total int64
	sql, args = countsb.Build()
	err = m.conn.QueryRowCtx(ctx, &total, sql, args...)
	if err != nil {
		return nil, 0, err
	}

	return resp, total, nil
}
